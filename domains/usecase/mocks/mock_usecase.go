// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	postgres "kc-ewallet/domains/repository/postgres"
	request "kc-ewallet/protocols/http/request"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserUsecase is a mock of IUserUsecase interface.
type MockIUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUsecaseMockRecorder
}

// MockIUserUsecaseMockRecorder is the mock recorder for MockIUserUsecase.
type MockIUserUsecaseMockRecorder struct {
	mock *MockIUserUsecase
}

// NewMockIUserUsecase creates a new mock instance.
func NewMockIUserUsecase(ctrl *gomock.Controller) *MockIUserUsecase {
	mock := &MockIUserUsecase{ctrl: ctrl}
	mock.recorder = &MockIUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUsecase) EXPECT() *MockIUserUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserUsecase) CreateUser(ctx context.Context, request request.RegisterUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserUsecaseMockRecorder) CreateUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserUsecase)(nil).CreateUser), ctx, request)
}

// GetUserByID mocks base method.
func (m *MockIUserUsecase) GetUserByID(ctx context.Context, userID int32) (*postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIUserUsecaseMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIUserUsecase)(nil).GetUserByID), ctx, userID)
}

// Login mocks base method.
func (m *MockIUserUsecase) Login(ctx context.Context, request request.LoginRequest) (string, *postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*postgres.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockIUserUsecaseMockRecorder) Login(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserUsecase)(nil).Login), ctx, request)
}

// MockITransactionUsecase is a mock of ITransactionUsecase interface.
type MockITransactionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionUsecaseMockRecorder
}

// MockITransactionUsecaseMockRecorder is the mock recorder for MockITransactionUsecase.
type MockITransactionUsecaseMockRecorder struct {
	mock *MockITransactionUsecase
}

// NewMockITransactionUsecase creates a new mock instance.
func NewMockITransactionUsecase(ctrl *gomock.Controller) *MockITransactionUsecase {
	mock := &MockITransactionUsecase{ctrl: ctrl}
	mock.recorder = &MockITransactionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionUsecase) EXPECT() *MockITransactionUsecaseMockRecorder {
	return m.recorder
}

// CreateCreditTransaction mocks base method.
func (m *MockITransactionUsecase) CreateCreditTransaction(ctx context.Context, request request.CreateCreditTransactionRequest) (int32, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditTransaction", ctx, request)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCreditTransaction indicates an expected call of CreateCreditTransaction.
func (mr *MockITransactionUsecaseMockRecorder) CreateCreditTransaction(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditTransaction", reflect.TypeOf((*MockITransactionUsecase)(nil).CreateCreditTransaction), ctx, request)
}

// CreateDebitTransaction mocks base method.
func (m *MockITransactionUsecase) CreateDebitTransaction(ctx context.Context, request request.CreateDebitTransactionRequest) (int32, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDebitTransaction", ctx, request)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDebitTransaction indicates an expected call of CreateDebitTransaction.
func (mr *MockITransactionUsecaseMockRecorder) CreateDebitTransaction(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDebitTransaction", reflect.TypeOf((*MockITransactionUsecase)(nil).CreateDebitTransaction), ctx, request)
}
