// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	postgres "kc-ewallet/domains/repository/postgres"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockIRepository) CreateTransaction(ctx context.Context, arg postgres.CreateTransactionParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, arg)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockIRepositoryMockRecorder) CreateTransaction(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockIRepository)(nil).CreateTransaction), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockIRepository) CreateUser(ctx context.Context, arg postgres.CreateUserParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIRepositoryMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIRepository)(nil).CreateUser), ctx, arg)
}

// GetUserByIDLock mocks base method.
func (m *MockIRepository) GetUserByIDLock(ctx context.Context, id int32) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIDLock", ctx, id)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIDLock indicates an expected call of GetUserByIDLock.
func (mr *MockIRepositoryMockRecorder) GetUserByIDLock(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIDLock", reflect.TypeOf((*MockIRepository)(nil).GetUserByIDLock), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockIRepository) GetUserByUsername(ctx context.Context, username string) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockIRepositoryMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockIRepository)(nil).GetUserByUsername), ctx, username)
}

// UpdateUserBalanceByID mocks base method.
func (m *MockIRepository) UpdateUserBalanceByID(ctx context.Context, arg postgres.UpdateUserBalanceByIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalanceByID", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalanceByID indicates an expected call of UpdateUserBalanceByID.
func (mr *MockIRepositoryMockRecorder) UpdateUserBalanceByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalanceByID", reflect.TypeOf((*MockIRepository)(nil).UpdateUserBalanceByID), ctx, arg)
}

// WithTx mocks base method.
func (m *MockIRepository) WithTx(tx *sql.Tx) *postgres.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(*postgres.Queries)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockIRepositoryMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockIRepository)(nil).WithTx), tx)
}
