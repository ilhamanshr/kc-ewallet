// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package postgres

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password, created_at)
VALUES ($1, $2, NOW())
RETURNING id
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserByIDLock = `-- name: GetUserByIDLock :one
SELECT id, username, password, balance, created_at
FROM users
WHERE id = $1
FOR UPDATE
`

func (q *Queries) GetUserByIDLock(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByIDLock, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, balance, created_at
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserBalanceByID = `-- name: UpdateUserBalanceByID :exec
UPDATE users
SET balance = $2
WHERE id = $1
`

type UpdateUserBalanceByIDParams struct {
	ID      int32
	Balance float64
}

func (q *Queries) UpdateUserBalanceByID(ctx context.Context, arg UpdateUserBalanceByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBalanceByID, arg.ID, arg.Balance)
	return err
}
