// Code generated by MockGen. DO NOT EDIT.
// Source: jwt.go

// Package mock_configuration is a generated GoMock package.
package mock_configuration

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIJWTConfiguration is a mock of IJWTConfiguration interface.
type MockIJWTConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockIJWTConfigurationMockRecorder
}

// MockIJWTConfigurationMockRecorder is the mock recorder for MockIJWTConfiguration.
type MockIJWTConfigurationMockRecorder struct {
	mock *MockIJWTConfiguration
}

// NewMockIJWTConfiguration creates a new mock instance.
func NewMockIJWTConfiguration(ctrl *gomock.Controller) *MockIJWTConfiguration {
	mock := &MockIJWTConfiguration{ctrl: ctrl}
	mock.recorder = &MockIJWTConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJWTConfiguration) EXPECT() *MockIJWTConfigurationMockRecorder {
	return m.recorder
}

// GetExpireInMinute mocks base method.
func (m *MockIJWTConfiguration) GetExpireInMinute() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpireInMinute")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetExpireInMinute indicates an expected call of GetExpireInMinute.
func (mr *MockIJWTConfigurationMockRecorder) GetExpireInMinute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpireInMinute", reflect.TypeOf((*MockIJWTConfiguration)(nil).GetExpireInMinute))
}

// GetIssuer mocks base method.
func (m *MockIJWTConfiguration) GetIssuer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockIJWTConfigurationMockRecorder) GetIssuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockIJWTConfiguration)(nil).GetIssuer))
}

// GetSigningKey mocks base method.
func (m *MockIJWTConfiguration) GetSigningKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSigningKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSigningKey indicates an expected call of GetSigningKey.
func (mr *MockIJWTConfigurationMockRecorder) GetSigningKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningKey", reflect.TypeOf((*MockIJWTConfiguration)(nil).GetSigningKey))
}

// SetJWTConfiguration mocks base method.
func (m *MockIJWTConfiguration) SetJWTConfiguration(signingKey, issuer, expiresInMinute string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJWTConfiguration", signingKey, issuer, expiresInMinute)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJWTConfiguration indicates an expected call of SetJWTConfiguration.
func (mr *MockIJWTConfigurationMockRecorder) SetJWTConfiguration(signingKey, issuer, expiresInMinute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJWTConfiguration", reflect.TypeOf((*MockIJWTConfiguration)(nil).SetJWTConfiguration), signingKey, issuer, expiresInMinute)
}
