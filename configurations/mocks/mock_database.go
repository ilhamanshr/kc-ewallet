// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_configuration is a generated GoMock package.
package mock_configuration

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDatabaseConfiguration is a mock of IDatabaseConfiguration interface.
type MockIDatabaseConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseConfigurationMockRecorder
}

// MockIDatabaseConfigurationMockRecorder is the mock recorder for MockIDatabaseConfiguration.
type MockIDatabaseConfigurationMockRecorder struct {
	mock *MockIDatabaseConfiguration
}

// NewMockIDatabaseConfiguration creates a new mock instance.
func NewMockIDatabaseConfiguration(ctrl *gomock.Controller) *MockIDatabaseConfiguration {
	mock := &MockIDatabaseConfiguration{ctrl: ctrl}
	mock.recorder = &MockIDatabaseConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabaseConfiguration) EXPECT() *MockIDatabaseConfigurationMockRecorder {
	return m.recorder
}

// GetDBName mocks base method.
func (m *MockIDatabaseConfiguration) GetDBName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDBName indicates an expected call of GetDBName.
func (mr *MockIDatabaseConfigurationMockRecorder) GetDBName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBName", reflect.TypeOf((*MockIDatabaseConfiguration)(nil).GetDBName))
}

// GetDBParam mocks base method.
func (m *MockIDatabaseConfiguration) GetDBParam() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBParam")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDBParam indicates an expected call of GetDBParam.
func (mr *MockIDatabaseConfigurationMockRecorder) GetDBParam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBParam", reflect.TypeOf((*MockIDatabaseConfiguration)(nil).GetDBParam))
}

// GetHost mocks base method.
func (m *MockIDatabaseConfiguration) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockIDatabaseConfigurationMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockIDatabaseConfiguration)(nil).GetHost))
}

// GetPassword mocks base method.
func (m *MockIDatabaseConfiguration) GetPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockIDatabaseConfigurationMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockIDatabaseConfiguration)(nil).GetPassword))
}

// GetPort mocks base method.
func (m *MockIDatabaseConfiguration) GetPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockIDatabaseConfigurationMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockIDatabaseConfiguration)(nil).GetPort))
}

// GetUser mocks base method.
func (m *MockIDatabaseConfiguration) GetUser() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIDatabaseConfigurationMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIDatabaseConfiguration)(nil).GetUser))
}
